=================================
video programs
=================================

v4l2-ctl   An application to control video4linux drivers
vlc        media player
ffmpeg     video converter
guvcview   GTK+ base UVC Viewer
cheese     tool to take pictures and videos from your webcam

=================================
video program: v4l2
=================================

To install on Fedora
  sudo dnf install v4l-utils

Examples
  v4l2-ctl
  v4l2-ctl --all
  v4l2-ctl --list-formats-ext
  v4l2-ctl --list-devices

=================================
video program: ffmpeg
=================================

Documentation
  https://ffmpeg.org/ffmpeg-all.html

Install on Fedora
  dnf install ffmpeg
  note: may need rpmfusion, I don't remember

Install on Raspbian
  It was already installed on Raspbian GNU/Linux 10 (buster).

Example: Make a video recording
  ffmpeg -i /dev/video0 out.mp4
  ffmpeg -i /dev/video0 out.mov
  ffmpeg -i /dev/video0 out.avi

  Output format is determined from the filename.

  Attempt is made to determine input format from the input source,
  if unsuccessful then the '-f' option is needed to specify the format.

Example: List ffmpeg capabilities
  ffmpeg -formats
  ffmpeg -codecs

Example: Make a sound recording, and play it back
  ffmpeg -f alsa -i plughw:U0x46d0x825 out.wav
  aplay out.wav

  arecord -l  # list CAPTURE Hardware Devices
  aplay -l    # list PLAYBACK Hardware Devices

  Note - use 'arecord -l' to determine the plughw name used above

Example: Merged Video and Audio
  ffmpeg -f v4l2 -i /dev/video0 \
         -f alsa -i plughw:U0x46d0x825 \
         test.mov

Video formats
  On my Raspberry Pi, with 4 CPUs, the ffmpeg program is unable to
  reliably include the audio in the output file. This occurs for the
  mov, mkv, and mp4 output file formats.

  What I observe is that the top command reports nearly 400% cpu 
  utilization by ffmpeg, and ffmpeg reports warning "ALSA buffer xrun".
  When playing back the file the video is okay, but the audio drops out 
  after a few seconds.

  I've tried running ffmpeg with various formats. The results are:

                 ffmpeg
    Format      CPU Util       Comments
    ------      --------       --------
     wmv          65           some audio distortion
                               sees to be the best choice
     avi          65           some audio distortion,
                               audio seems worse than wmv format
     mov         380           ALSA buffer xrun, 
                               audio drops out after a few seconds
     mkv         380           ALSO buffer xrun, 
                               audio drops out after a few seconds
     mp4         380           ALSA buffer xrun, 
                               audio drops out after a few seconds

  I believe that for the mov, mkv and mp4 formats that the ffmpeg program
  is giving priority to the video capture, which uses most of the CPU cycles;
  and thus not having enough remaining CPU cycles to capture the audio.

  My testing has used the Logitech C270 Webcam.

  Additional info on video formats:
  https://www.uscreen.tv/blog/the-quest-for-the-best-video-format-how-do-you-know-whats-best-for-you/

=================================
video program: vlc
=================================

How to use rpmfusion
  https://rpmfusion.org/Configuration/

To install vlc on Fedora
  rpm -ivh http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm
  yum install vlc

Examples
  vlc v4l2:///dev/video0

  cvlc v4l2:///dev/video0 \
     --sout='#transcode{vcodec=h264,vb072}:standard{access=file,mux=mp4,dst=capture.mp4}' 

=================================
video program: guvcview
=================================

http://guvcview.sourceforge.net/Doc.html

=================================
notes on using apt
=================================

apt update                       # update local package database
apt upgrade [-y]                 # upgrade the installed packages
apt full-upgrade                 # same as upgrade, but if package removal is needed it will do so

apt update && apt upgrade -y     # system upgrade

apt search <search_term>         # search package database 

apt install <package_name>       # install package
              --no-upgrade       # if already installed will not upgrade
              --only-upgrade     # will not install but only upgrade

apt remove <package_name>        # removes package but leaves residue config files
apt purge <package_name>         # removes package and config files

apt show   <package_name>        # learn about a package

apt list --upgradeable           # list packages that can be upgraded
apt list --installed             # list installed packages

=================================
command line access to google drive
=================================

gdrive program 
  https://linuxnewbieguide.org/using-google-drive-from-the-linux-command-line/
  https://github.com/gdrive-org/gdrive

to build and install gdrive program from source code
  install go: 
    yum install golang-bin   # ... or 
    apt install golang
  build
    go get github.com/prasmussen/gdrive
    cd ~/go/src/github.com/prasmussen/gdrive
    vi _release/build-all.sh
        set PLATFORMS=<your_platform>
    _release/build-all.sh
  set symbolic link to the built binary
    ln -s ~/go/src/github.com/prasmussen/gdrive/_release/bin/gdrive-linux-rpi  ~/bin/gdrive
  run 'gdrive about', and attempt to authorize
    I was unable to authorize access to my google drive, see next step 

how to modify the gdrive program to permit access to google drive ...
  note - I already have a google developer project, which I make use of for the following steps
  goto https://console.developers.google.com/apis
  select OAuth Consent Screen
    choose: External
    select name, such as: 'my access to google drive'
    save
  select Credentials
    enable google drive api
    create credentials
    save CLIENT_ID and CLIENT_SECRET for the next steps
  modify gdrive program to use CLIENT_ID and CLIENT_SECRET
    cd ~/go/src/github.com/prasmussen/gdrive
    vi handlers_drive.go
      modify ClientId and ClientSecret
    _release/build-all.sh
  run 'gdrive about', and attempt to authorize
    I was able to authorize now

some gdrive command examples
  gdrive help
  gdrive help about
  gdrive about
  gdrive list
  gdrive list -m 1000 > gdrive_list
  gdrive upload -p xxxxxxxxx test.mov
    
=================================
schedule bash script to run daily using cron
=================================

edit /etc/crontab and add the following line to execute 
the capture_video bash script daily at 16:45

45 16   * * *   haid    cd /home/haid/proj_capture_video && ./capture_video

=================================
tplink smartplug 
=================================

My smartplug is TP-Link HS100, purchased from
  https://www.amazon.com/Kasa-Smart-Wi-Fi-Plug-TP-Link/dp/B0178IC734

After purchasing the TP-Link HS100 or HS100, you need:
  - install the TP-Link Kasa App, and configure the smart plug on your wireless network
  - adjust your router to make the smartplug's IP address static
  - use the smartplug's IP addrss in the tplink_smartplug.py script as shown
    in the examples below

An excellent Reverse Engineering the TP-Link HS110 is found here
  https://www.softscheck.com/en/reverse-engineering-tp-link-hs110/#TP-Link%20Smart%20Home%20Protocol
  https://github.com/softScheck/tplink-smartplug
   - tplink_smartplug.py
   - tplink-smarthome-commands.txt

Examples of using tplink_smartplug.py
  ./tplink-smartplug-master/tplink_smartplug.py -t 192.168.1.191 -c off
  ./tplink-smartplug-master/tplink_smartplug.py -t 192.168.1.191 -c on
 
